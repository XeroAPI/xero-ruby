=begin
#Xero Payroll AU API

#This is the Xero Payroll API for orgs in Australia region.

Contact: api@xero.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

module XeroRuby
  class PayrollAuApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.new)
      @api_client = api_client
    end
    # Creates a payroll employee
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param employee [Array<Employee>] 
    # @param [Hash] opts the optional parameters
    # @return [Employees]
    def create_employee(xero_tenant_id, employee, opts = {})
      data, _status_code, _headers = create_employee_with_http_info(xero_tenant_id, employee, opts)
      data
    end

    # Creates a payroll employee
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param employee [Array<Employee>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Employees, Integer, Hash)>] Employees data, response status code and response headers
    def create_employee_with_http_info(xero_tenant_id, employee, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.create_employee ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.create_employee"
      end
      # verify the required parameter 'employee' is set
      if @api_client.config.client_side_validation && employee.nil?
        fail ArgumentError, "Missing the required parameter 'employee' when calling PayrollAuApi.create_employee"
      end
      # resource path
      local_var_path = '/Employees'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(employee) 

      # return_type
      return_type = opts[:return_type] || 'Employees' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#create_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a leave application
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param leave_application [Array<LeaveApplication>] 
    # @param [Hash] opts the optional parameters
    # @return [LeaveApplications]
    def create_leave_application(xero_tenant_id, leave_application, opts = {})
      data, _status_code, _headers = create_leave_application_with_http_info(xero_tenant_id, leave_application, opts)
      data
    end

    # Creates a leave application
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param leave_application [Array<LeaveApplication>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LeaveApplications, Integer, Hash)>] LeaveApplications data, response status code and response headers
    def create_leave_application_with_http_info(xero_tenant_id, leave_application, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.create_leave_application ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.create_leave_application"
      end
      # verify the required parameter 'leave_application' is set
      if @api_client.config.client_side_validation && leave_application.nil?
        fail ArgumentError, "Missing the required parameter 'leave_application' when calling PayrollAuApi.create_leave_application"
      end
      # resource path
      local_var_path = '/LeaveApplications'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(leave_application) 

      # return_type
      return_type = opts[:return_type] || 'LeaveApplications' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#create_leave_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a pay item
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param pay_item [PayItem] 
    # @param [Hash] opts the optional parameters
    # @return [PayItems]
    def create_pay_item(xero_tenant_id, pay_item, opts = {})
      data, _status_code, _headers = create_pay_item_with_http_info(xero_tenant_id, pay_item, opts)
      data
    end

    # Creates a pay item
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param pay_item [PayItem] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayItems, Integer, Hash)>] PayItems data, response status code and response headers
    def create_pay_item_with_http_info(xero_tenant_id, pay_item, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.create_pay_item ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.create_pay_item"
      end
      # verify the required parameter 'pay_item' is set
      if @api_client.config.client_side_validation && pay_item.nil?
        fail ArgumentError, "Missing the required parameter 'pay_item' when calling PayrollAuApi.create_pay_item"
      end
      # resource path
      local_var_path = '/PayItems'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pay_item) 

      # return_type
      return_type = opts[:return_type] || 'PayItems' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#create_pay_item\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a pay run
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param pay_run [Array<PayRun>] 
    # @param [Hash] opts the optional parameters
    # @return [PayRuns]
    def create_pay_run(xero_tenant_id, pay_run, opts = {})
      data, _status_code, _headers = create_pay_run_with_http_info(xero_tenant_id, pay_run, opts)
      data
    end

    # Creates a pay run
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param pay_run [Array<PayRun>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayRuns, Integer, Hash)>] PayRuns data, response status code and response headers
    def create_pay_run_with_http_info(xero_tenant_id, pay_run, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.create_pay_run ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.create_pay_run"
      end
      # verify the required parameter 'pay_run' is set
      if @api_client.config.client_side_validation && pay_run.nil?
        fail ArgumentError, "Missing the required parameter 'pay_run' when calling PayrollAuApi.create_pay_run"
      end
      # resource path
      local_var_path = '/PayRuns'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(pay_run) 

      # return_type
      return_type = opts[:return_type] || 'PayRuns' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#create_pay_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a Payroll Calendar
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param payroll_calendar [Array<PayrollCalendar>] 
    # @param [Hash] opts the optional parameters
    # @return [PayrollCalendars]
    def create_payroll_calendar(xero_tenant_id, payroll_calendar, opts = {})
      data, _status_code, _headers = create_payroll_calendar_with_http_info(xero_tenant_id, payroll_calendar, opts)
      data
    end

    # Creates a Payroll Calendar
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param payroll_calendar [Array<PayrollCalendar>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayrollCalendars, Integer, Hash)>] PayrollCalendars data, response status code and response headers
    def create_payroll_calendar_with_http_info(xero_tenant_id, payroll_calendar, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.create_payroll_calendar ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.create_payroll_calendar"
      end
      # verify the required parameter 'payroll_calendar' is set
      if @api_client.config.client_side_validation && payroll_calendar.nil?
        fail ArgumentError, "Missing the required parameter 'payroll_calendar' when calling PayrollAuApi.create_payroll_calendar"
      end
      # resource path
      local_var_path = '/PayrollCalendars'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(payroll_calendar) 

      # return_type
      return_type = opts[:return_type] || 'PayrollCalendars' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#create_payroll_calendar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a superfund
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param super_fund [Array<SuperFund>] 
    # @param [Hash] opts the optional parameters
    # @return [SuperFunds]
    def create_superfund(xero_tenant_id, super_fund, opts = {})
      data, _status_code, _headers = create_superfund_with_http_info(xero_tenant_id, super_fund, opts)
      data
    end

    # Creates a superfund
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param super_fund [Array<SuperFund>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuperFunds, Integer, Hash)>] SuperFunds data, response status code and response headers
    def create_superfund_with_http_info(xero_tenant_id, super_fund, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.create_superfund ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.create_superfund"
      end
      # verify the required parameter 'super_fund' is set
      if @api_client.config.client_side_validation && super_fund.nil?
        fail ArgumentError, "Missing the required parameter 'super_fund' when calling PayrollAuApi.create_superfund"
      end
      # resource path
      local_var_path = '/Superfunds'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(super_fund) 

      # return_type
      return_type = opts[:return_type] || 'SuperFunds' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#create_superfund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a timesheet
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param timesheet [Array<Timesheet>] 
    # @param [Hash] opts the optional parameters
    # @return [Timesheets]
    def create_timesheet(xero_tenant_id, timesheet, opts = {})
      data, _status_code, _headers = create_timesheet_with_http_info(xero_tenant_id, timesheet, opts)
      data
    end

    # Creates a timesheet
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param timesheet [Array<Timesheet>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Timesheets, Integer, Hash)>] Timesheets data, response status code and response headers
    def create_timesheet_with_http_info(xero_tenant_id, timesheet, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.create_timesheet ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.create_timesheet"
      end
      # verify the required parameter 'timesheet' is set
      if @api_client.config.client_side_validation && timesheet.nil?
        fail ArgumentError, "Missing the required parameter 'timesheet' when calling PayrollAuApi.create_timesheet"
      end
      # resource path
      local_var_path = '/Timesheets'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(timesheet) 

      # return_type
      return_type = opts[:return_type] || 'Timesheets' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#create_timesheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves an employee's detail by unique employee id
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param employee_id [String] Employee id for single object
    # @param [Hash] opts the optional parameters
    # @return [Employees]
    def get_employee(xero_tenant_id, employee_id, opts = {})
      data, _status_code, _headers = get_employee_with_http_info(xero_tenant_id, employee_id, opts)
      data
    end

    # Retrieves an employee&#39;s detail by unique employee id
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param employee_id [String] Employee id for single object
    # @param [Hash] opts the optional parameters
    # @return [Array<(Employees, Integer, Hash)>] Employees data, response status code and response headers
    def get_employee_with_http_info(xero_tenant_id, employee_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_employee ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_employee"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling PayrollAuApi.get_employee"
      end
      # resource path
      local_var_path = '/Employees/{EmployeeID}'.sub('{' + 'EmployeeID' + '}', employee_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Employees' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Searches payroll employees
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call
    # @return [Employees]
    def get_employees(xero_tenant_id, opts = {})
      data, _status_code, _headers = get_employees_with_http_info(xero_tenant_id, opts)
      data
    end

    # Searches payroll employees
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 employees will be returned in a single API call
    # @return [Array<(Employees, Integer, Hash)>] Employees data, response status code and response headers
    def get_employees_with_http_info(xero_tenant_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_employees ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_employees"
      end
      # resource path
      local_var_path = '/Employees'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Employees' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_employees\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a leave application by a unique leave application id
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param leave_application_id [String] Leave Application id for single object
    # @param [Hash] opts the optional parameters
    # @return [LeaveApplications]
    def get_leave_application(xero_tenant_id, leave_application_id, opts = {})
      data, _status_code, _headers = get_leave_application_with_http_info(xero_tenant_id, leave_application_id, opts)
      data
    end

    # Retrieves a leave application by a unique leave application id
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param leave_application_id [String] Leave Application id for single object
    # @param [Hash] opts the optional parameters
    # @return [Array<(LeaveApplications, Integer, Hash)>] LeaveApplications data, response status code and response headers
    def get_leave_application_with_http_info(xero_tenant_id, leave_application_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_leave_application ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_leave_application"
      end
      # verify the required parameter 'leave_application_id' is set
      if @api_client.config.client_side_validation && leave_application_id.nil?
        fail ArgumentError, "Missing the required parameter 'leave_application_id' when calling PayrollAuApi.get_leave_application"
      end
      # resource path
      local_var_path = '/LeaveApplications/{LeaveApplicationID}'.sub('{' + 'LeaveApplicationID' + '}', leave_application_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'LeaveApplications' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_leave_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves leave applications
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
    # @return [LeaveApplications]
    def get_leave_applications(xero_tenant_id, opts = {})
      data, _status_code, _headers = get_leave_applications_with_http_info(xero_tenant_id, opts)
      data
    end

    # Retrieves leave applications
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
    # @return [Array<(LeaveApplications, Integer, Hash)>] LeaveApplications data, response status code and response headers
    def get_leave_applications_with_http_info(xero_tenant_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_leave_applications ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_leave_applications"
      end
      # resource path
      local_var_path = '/LeaveApplications'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'LeaveApplications' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_leave_applications\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves pay items
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
    # @return [PayItems]
    def get_pay_items(xero_tenant_id, opts = {})
      data, _status_code, _headers = get_pay_items_with_http_info(xero_tenant_id, opts)
      data
    end

    # Retrieves pay items
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
    # @return [Array<(PayItems, Integer, Hash)>] PayItems data, response status code and response headers
    def get_pay_items_with_http_info(xero_tenant_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_pay_items ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_pay_items"
      end
      # resource path
      local_var_path = '/PayItems'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PayItems' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_pay_items\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a pay run by using a unique pay run id
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param pay_run_id [String] PayRun id for single object
    # @param [Hash] opts the optional parameters
    # @return [PayRuns]
    def get_pay_run(xero_tenant_id, pay_run_id, opts = {})
      data, _status_code, _headers = get_pay_run_with_http_info(xero_tenant_id, pay_run_id, opts)
      data
    end

    # Retrieves a pay run by using a unique pay run id
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param pay_run_id [String] PayRun id for single object
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayRuns, Integer, Hash)>] PayRuns data, response status code and response headers
    def get_pay_run_with_http_info(xero_tenant_id, pay_run_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_pay_run ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_pay_run"
      end
      # verify the required parameter 'pay_run_id' is set
      if @api_client.config.client_side_validation && pay_run_id.nil?
        fail ArgumentError, "Missing the required parameter 'pay_run_id' when calling PayrollAuApi.get_pay_run"
      end
      # resource path
      local_var_path = '/PayRuns/{PayRunID}'.sub('{' + 'PayRunID' + '}', pay_run_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PayRuns' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_pay_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves pay runs
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call
    # @return [PayRuns]
    def get_pay_runs(xero_tenant_id, opts = {})
      data, _status_code, _headers = get_pay_runs_with_http_info(xero_tenant_id, opts)
      data
    end

    # Retrieves pay runs
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 PayRuns will be returned in a single API call
    # @return [Array<(PayRuns, Integer, Hash)>] PayRuns data, response status code and response headers
    def get_pay_runs_with_http_info(xero_tenant_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_pay_runs ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_pay_runs"
      end
      # resource path
      local_var_path = '/PayRuns'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PayRuns' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_pay_runs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves payroll calendar by using a unique payroll calendar ID
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param payroll_calendar_id [String] Payroll Calendar id for single object
    # @param [Hash] opts the optional parameters
    # @return [PayrollCalendars]
    def get_payroll_calendar(xero_tenant_id, payroll_calendar_id, opts = {})
      data, _status_code, _headers = get_payroll_calendar_with_http_info(xero_tenant_id, payroll_calendar_id, opts)
      data
    end

    # Retrieves payroll calendar by using a unique payroll calendar ID
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param payroll_calendar_id [String] Payroll Calendar id for single object
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayrollCalendars, Integer, Hash)>] PayrollCalendars data, response status code and response headers
    def get_payroll_calendar_with_http_info(xero_tenant_id, payroll_calendar_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_payroll_calendar ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_payroll_calendar"
      end
      # verify the required parameter 'payroll_calendar_id' is set
      if @api_client.config.client_side_validation && payroll_calendar_id.nil?
        fail ArgumentError, "Missing the required parameter 'payroll_calendar_id' when calling PayrollAuApi.get_payroll_calendar"
      end
      # resource path
      local_var_path = '/PayrollCalendars/{PayrollCalendarID}'.sub('{' + 'PayrollCalendarID' + '}', payroll_calendar_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PayrollCalendars' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_payroll_calendar\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves payroll calendars
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
    # @return [PayrollCalendars]
    def get_payroll_calendars(xero_tenant_id, opts = {})
      data, _status_code, _headers = get_payroll_calendars_with_http_info(xero_tenant_id, opts)
      data
    end

    # Retrieves payroll calendars
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 objects will be returned in a single API call
    # @return [Array<(PayrollCalendars, Integer, Hash)>] PayrollCalendars data, response status code and response headers
    def get_payroll_calendars_with_http_info(xero_tenant_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_payroll_calendars ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_payroll_calendars"
      end
      # resource path
      local_var_path = '/PayrollCalendars'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PayrollCalendars' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_payroll_calendars\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves for a payslip by a unique payslip id
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param payslip_id [String] Payslip id for single object
    # @param [Hash] opts the optional parameters
    # @return [PayslipObject]
    def get_payslip(xero_tenant_id, payslip_id, opts = {})
      data, _status_code, _headers = get_payslip_with_http_info(xero_tenant_id, payslip_id, opts)
      data
    end

    # Retrieves for a payslip by a unique payslip id
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param payslip_id [String] Payslip id for single object
    # @param [Hash] opts the optional parameters
    # @return [Array<(PayslipObject, Integer, Hash)>] PayslipObject data, response status code and response headers
    def get_payslip_with_http_info(xero_tenant_id, payslip_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_payslip ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_payslip"
      end
      # verify the required parameter 'payslip_id' is set
      if @api_client.config.client_side_validation && payslip_id.nil?
        fail ArgumentError, "Missing the required parameter 'payslip_id' when calling PayrollAuApi.get_payslip"
      end
      # resource path
      local_var_path = '/Payslip/{PayslipID}'.sub('{' + 'PayslipID' + '}', payslip_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'PayslipObject' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_payslip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves payroll settings
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @return [SettingsObject]
    def get_settings(xero_tenant_id, opts = {})
      data, _status_code, _headers = get_settings_with_http_info(xero_tenant_id, opts)
      data
    end

    # Retrieves payroll settings
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @return [Array<(SettingsObject, Integer, Hash)>] SettingsObject data, response status code and response headers
    def get_settings_with_http_info(xero_tenant_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_settings ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_settings"
      end
      # resource path
      local_var_path = '/Settings'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SettingsObject' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_settings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a superfund by using a unique superfund ID
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param super_fund_id [String] Superfund id for single object
    # @param [Hash] opts the optional parameters
    # @return [SuperFunds]
    def get_superfund(xero_tenant_id, super_fund_id, opts = {})
      data, _status_code, _headers = get_superfund_with_http_info(xero_tenant_id, super_fund_id, opts)
      data
    end

    # Retrieves a superfund by using a unique superfund ID
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param super_fund_id [String] Superfund id for single object
    # @param [Hash] opts the optional parameters
    # @return [Array<(SuperFunds, Integer, Hash)>] SuperFunds data, response status code and response headers
    def get_superfund_with_http_info(xero_tenant_id, super_fund_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_superfund ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_superfund"
      end
      # verify the required parameter 'super_fund_id' is set
      if @api_client.config.client_side_validation && super_fund_id.nil?
        fail ArgumentError, "Missing the required parameter 'super_fund_id' when calling PayrollAuApi.get_superfund"
      end
      # resource path
      local_var_path = '/Superfunds/{SuperFundID}'.sub('{' + 'SuperFundID' + '}', super_fund_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SuperFunds' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_superfund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves superfund products
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :abn The ABN of the Regulated SuperFund
    # @option opts [String] :usi The USI of the Regulated SuperFund
    # @return [SuperFundProducts]
    def get_superfund_products(xero_tenant_id, opts = {})
      data, _status_code, _headers = get_superfund_products_with_http_info(xero_tenant_id, opts)
      data
    end

    # Retrieves superfund products
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :abn The ABN of the Regulated SuperFund
    # @option opts [String] :usi The USI of the Regulated SuperFund
    # @return [Array<(SuperFundProducts, Integer, Hash)>] SuperFundProducts data, response status code and response headers
    def get_superfund_products_with_http_info(xero_tenant_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_superfund_products ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_superfund_products"
      end
      # resource path
      local_var_path = '/SuperfundProducts'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ABN'] = opts[:'abn'] if !opts[:'abn'].nil?
      query_params[:'USI'] = opts[:'usi'] if !opts[:'usi'].nil?
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SuperFundProducts' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_superfund_products\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves superfunds
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call
    # @return [SuperFunds]
    def get_superfunds(xero_tenant_id, opts = {})
      data, _status_code, _headers = get_superfunds_with_http_info(xero_tenant_id, opts)
      data
    end

    # Retrieves superfunds
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 SuperFunds will be returned in a single API call
    # @return [Array<(SuperFunds, Integer, Hash)>] SuperFunds data, response status code and response headers
    def get_superfunds_with_http_info(xero_tenant_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_superfunds ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_superfunds"
      end
      # resource path
      local_var_path = '/Superfunds'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'SuperFunds' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_superfunds\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves a timesheet by using a unique timesheet id
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param timesheet_id [String] Timesheet id for single object
    # @param [Hash] opts the optional parameters
    # @return [TimesheetObject]
    def get_timesheet(xero_tenant_id, timesheet_id, opts = {})
      data, _status_code, _headers = get_timesheet_with_http_info(xero_tenant_id, timesheet_id, opts)
      data
    end

    # Retrieves a timesheet by using a unique timesheet id
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param timesheet_id [String] Timesheet id for single object
    # @param [Hash] opts the optional parameters
    # @return [Array<(TimesheetObject, Integer, Hash)>] TimesheetObject data, response status code and response headers
    def get_timesheet_with_http_info(xero_tenant_id, timesheet_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_timesheet ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_timesheet"
      end
      # verify the required parameter 'timesheet_id' is set
      if @api_client.config.client_side_validation && timesheet_id.nil?
        fail ArgumentError, "Missing the required parameter 'timesheet_id' when calling PayrollAuApi.get_timesheet"
      end
      # resource path
      local_var_path = '/Timesheets/{TimesheetID}'.sub('{' + 'TimesheetID' + '}', timesheet_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'TimesheetObject' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_timesheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Retrieves timesheets
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call
    # @return [Timesheets]
    def get_timesheets(xero_tenant_id, opts = {})
      data, _status_code, _headers = get_timesheets_with_http_info(xero_tenant_id, opts)
      data
    end

    # Retrieves timesheets
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param [Hash] opts the optional parameters
    # @option opts [String] :if_modified_since Only records created or modified since this timestamp will be returned
    # @option opts [String] :where Filter by an any element
    # @option opts [String] :order Order by an any element
    # @option opts [Integer] :page e.g. page&#x3D;1 – Up to 100 timesheets will be returned in a single API call
    # @return [Array<(Timesheets, Integer, Hash)>] Timesheets data, response status code and response headers
    def get_timesheets_with_http_info(xero_tenant_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.get_timesheets ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.get_timesheets"
      end
      # resource path
      local_var_path = '/Timesheets'

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'where'] = opts[:'where'] if !opts[:'where'].nil?
      query_params[:'order'] = opts[:'order'] if !opts[:'order'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id
      header_params[:'If-Modified-Since'] = opts[:'if_modified_since'] if !opts[:'if_modified_since'].nil?

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Timesheets' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#get_timesheets\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates an employee's detail
    # Update properties on a single employee
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param employee_id [String] Employee id for single object
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Employee>] :employee 
    # @return [Employees]
    def update_employee(xero_tenant_id, employee_id, opts = {})
      data, _status_code, _headers = update_employee_with_http_info(xero_tenant_id, employee_id, opts)
      data
    end

    # Updates an employee&#39;s detail
    # Update properties on a single employee
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param employee_id [String] Employee id for single object
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Employee>] :employee 
    # @return [Array<(Employees, Integer, Hash)>] Employees data, response status code and response headers
    def update_employee_with_http_info(xero_tenant_id, employee_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.update_employee ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.update_employee"
      end
      # verify the required parameter 'employee_id' is set
      if @api_client.config.client_side_validation && employee_id.nil?
        fail ArgumentError, "Missing the required parameter 'employee_id' when calling PayrollAuApi.update_employee"
      end
      # resource path
      local_var_path = '/Employees/{EmployeeID}'.sub('{' + 'EmployeeID' + '}', employee_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'employee']) 

      # return_type
      return_type = opts[:return_type] || 'Employees' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#update_employee\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a specific leave application
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param leave_application_id [String] Leave Application id for single object
    # @param leave_application [Array<LeaveApplication>] 
    # @param [Hash] opts the optional parameters
    # @return [LeaveApplications]
    def update_leave_application(xero_tenant_id, leave_application_id, leave_application, opts = {})
      data, _status_code, _headers = update_leave_application_with_http_info(xero_tenant_id, leave_application_id, leave_application, opts)
      data
    end

    # Updates a specific leave application
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param leave_application_id [String] Leave Application id for single object
    # @param leave_application [Array<LeaveApplication>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(LeaveApplications, Integer, Hash)>] LeaveApplications data, response status code and response headers
    def update_leave_application_with_http_info(xero_tenant_id, leave_application_id, leave_application, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.update_leave_application ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.update_leave_application"
      end
      # verify the required parameter 'leave_application_id' is set
      if @api_client.config.client_side_validation && leave_application_id.nil?
        fail ArgumentError, "Missing the required parameter 'leave_application_id' when calling PayrollAuApi.update_leave_application"
      end
      # verify the required parameter 'leave_application' is set
      if @api_client.config.client_side_validation && leave_application.nil?
        fail ArgumentError, "Missing the required parameter 'leave_application' when calling PayrollAuApi.update_leave_application"
      end
      # resource path
      local_var_path = '/LeaveApplications/{LeaveApplicationID}'.sub('{' + 'LeaveApplicationID' + '}', leave_application_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(leave_application) 

      # return_type
      return_type = opts[:return_type] || 'LeaveApplications' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#update_leave_application\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a pay run
    # Update properties on a single PayRun
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param pay_run_id [String] PayRun id for single object
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PayRun>] :pay_run 
    # @return [PayRuns]
    def update_pay_run(xero_tenant_id, pay_run_id, opts = {})
      data, _status_code, _headers = update_pay_run_with_http_info(xero_tenant_id, pay_run_id, opts)
      data
    end

    # Updates a pay run
    # Update properties on a single PayRun
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param pay_run_id [String] PayRun id for single object
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PayRun>] :pay_run 
    # @return [Array<(PayRuns, Integer, Hash)>] PayRuns data, response status code and response headers
    def update_pay_run_with_http_info(xero_tenant_id, pay_run_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.update_pay_run ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.update_pay_run"
      end
      # verify the required parameter 'pay_run_id' is set
      if @api_client.config.client_side_validation && pay_run_id.nil?
        fail ArgumentError, "Missing the required parameter 'pay_run_id' when calling PayrollAuApi.update_pay_run"
      end
      # resource path
      local_var_path = '/PayRuns/{PayRunID}'.sub('{' + 'PayRunID' + '}', pay_run_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'pay_run']) 

      # return_type
      return_type = opts[:return_type] || 'PayRuns' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#update_pay_run\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a payslip
    # Update lines on a single payslips
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param payslip_id [String] Payslip id for single object
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PayslipLines>] :payslip_lines 
    # @return [Payslips]
    def update_payslip(xero_tenant_id, payslip_id, opts = {})
      data, _status_code, _headers = update_payslip_with_http_info(xero_tenant_id, payslip_id, opts)
      data
    end

    # Updates a payslip
    # Update lines on a single payslips
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param payslip_id [String] Payslip id for single object
    # @param [Hash] opts the optional parameters
    # @option opts [Array<PayslipLines>] :payslip_lines 
    # @return [Array<(Payslips, Integer, Hash)>] Payslips data, response status code and response headers
    def update_payslip_with_http_info(xero_tenant_id, payslip_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.update_payslip ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.update_payslip"
      end
      # verify the required parameter 'payslip_id' is set
      if @api_client.config.client_side_validation && payslip_id.nil?
        fail ArgumentError, "Missing the required parameter 'payslip_id' when calling PayrollAuApi.update_payslip"
      end
      # resource path
      local_var_path = '/Payslip/{PayslipID}'.sub('{' + 'PayslipID' + '}', payslip_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'payslip_lines']) 

      # return_type
      return_type = opts[:return_type] || 'Payslips' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#update_payslip\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a superfund
    # Update properties on a single Superfund
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param super_fund_id [String] Superfund id for single object
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SuperFund>] :super_fund 
    # @return [SuperFunds]
    def update_superfund(xero_tenant_id, super_fund_id, opts = {})
      data, _status_code, _headers = update_superfund_with_http_info(xero_tenant_id, super_fund_id, opts)
      data
    end

    # Updates a superfund
    # Update properties on a single Superfund
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param super_fund_id [String] Superfund id for single object
    # @param [Hash] opts the optional parameters
    # @option opts [Array<SuperFund>] :super_fund 
    # @return [Array<(SuperFunds, Integer, Hash)>] SuperFunds data, response status code and response headers
    def update_superfund_with_http_info(xero_tenant_id, super_fund_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.update_superfund ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.update_superfund"
      end
      # verify the required parameter 'super_fund_id' is set
      if @api_client.config.client_side_validation && super_fund_id.nil?
        fail ArgumentError, "Missing the required parameter 'super_fund_id' when calling PayrollAuApi.update_superfund"
      end
      # resource path
      local_var_path = '/Superfunds/{SuperFundID}'.sub('{' + 'SuperFundID' + '}', super_fund_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'super_fund']) 

      # return_type
      return_type = opts[:return_type] || 'SuperFunds' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#update_superfund\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Updates a timesheet
    # Update properties on a single timesheet
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param timesheet_id [String] Timesheet id for single object
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Timesheet>] :timesheet 
    # @return [Timesheets]
    def update_timesheet(xero_tenant_id, timesheet_id, opts = {})
      data, _status_code, _headers = update_timesheet_with_http_info(xero_tenant_id, timesheet_id, opts)
      data
    end

    # Updates a timesheet
    # Update properties on a single timesheet
    # @param xero_tenant_id [String] Xero identifier for Tenant
    # @param timesheet_id [String] Timesheet id for single object
    # @param [Hash] opts the optional parameters
    # @option opts [Array<Timesheet>] :timesheet 
    # @return [Array<(Timesheets, Integer, Hash)>] Timesheets data, response status code and response headers
    def update_timesheet_with_http_info(xero_tenant_id, timesheet_id, options = {})
      opts = options.dup
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: PayrollAuApi.update_timesheet ...'
      end
      # verify the required parameter 'xero_tenant_id' is set
      if @api_client.config.client_side_validation && xero_tenant_id.nil?
        fail ArgumentError, "Missing the required parameter 'xero_tenant_id' when calling PayrollAuApi.update_timesheet"
      end
      # verify the required parameter 'timesheet_id' is set
      if @api_client.config.client_side_validation && timesheet_id.nil?
        fail ArgumentError, "Missing the required parameter 'timesheet_id' when calling PayrollAuApi.update_timesheet"
      end
      # resource path
      local_var_path = '/Timesheets/{TimesheetID}'.sub('{' + 'TimesheetID' + '}', timesheet_id.to_s)

      # camelize keys of incoming `where` opts
      opts[:'where'] = @api_client.parameterize_where(opts[:'where']) if !opts[:'where'].nil?

      # query parameters
      query_params = opts[:query_params] || {}
      
      # XeroAPI's `IDs` convention openapi-generator does not snake_case properly.. manual over-riding `i_ds` malformations:
      query_params[:'IDs'] = @api_client.build_collection_param(opts[:'ids'], :csv) if !opts[:'ids'].nil?
      query_params[:'ContactIDs'] = @api_client.build_collection_param(opts[:'contact_ids'], :csv) if !opts[:'contact_ids'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])
      header_params[:'Xero-Tenant-Id'] = xero_tenant_id

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'timesheet']) 

      # return_type
      return_type = opts[:return_type] || 'Timesheets' 

      # auth_names
      auth_names = opts[:auth_names] || ['OAuth2']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, "PayrollAuApi", new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: PayrollAuApi#update_timesheet\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
