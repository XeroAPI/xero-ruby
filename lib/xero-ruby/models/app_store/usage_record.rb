=begin
#Xero AppStore API

#These endpoints are for Xero Partners to interact with the App Store Billing platform

Contact: api@xero.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.4.0

=end

require 'time'
require 'date'

module XeroRuby::AppStore
  require 'bigdecimal'

  class UsageRecord
    # The quantity recorded
    attr_accessor :quantity
    
    # The unique identifier of the Subscription.
    attr_accessor :subscription_id
    
    # The unique identifier of the SubscriptionItem.
    attr_accessor :subscription_item_id
    
    # If the subscription is a test subscription
    attr_accessor :test_mode
    
    # The time when this usage was recorded in UTC
    attr_accessor :recorded_at
    
    # The unique identifier of the usageRecord.
    attr_accessor :usage_record_id
    
    # The price per unit
    attr_accessor :price_per_unit
    
    # The unique identifier of the linked Product
    attr_accessor :product_id
    
    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'quantity' => :'quantity',
        :'subscription_id' => :'subscriptionId',
        :'subscription_item_id' => :'subscriptionItemId',
        :'test_mode' => :'testMode',
        :'recorded_at' => :'recordedAt',
        :'usage_record_id' => :'usageRecordId',
        :'price_per_unit' => :'pricePerUnit',
        :'product_id' => :'productId'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'quantity' => :'Integer',
        :'subscription_id' => :'String',
        :'subscription_item_id' => :'String',
        :'test_mode' => :'Boolean',
        :'recorded_at' => :'Time',
        :'usage_record_id' => :'String',
        :'price_per_unit' => :'Float',
        :'product_id' => :'String'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `XeroRuby::AppStore::UsageRecord` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `XeroRuby::AppStore::UsageRecord`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'quantity')
        self.quantity = attributes[:'quantity']
      end

      if attributes.key?(:'subscription_id')
        self.subscription_id = attributes[:'subscription_id']
      end

      if attributes.key?(:'subscription_item_id')
        self.subscription_item_id = attributes[:'subscription_item_id']
      end

      if attributes.key?(:'test_mode')
        self.test_mode = attributes[:'test_mode']
      end

      if attributes.key?(:'recorded_at')
        self.recorded_at = attributes[:'recorded_at']
      end

      if attributes.key?(:'usage_record_id')
        self.usage_record_id = attributes[:'usage_record_id']
      end

      if attributes.key?(:'price_per_unit')
        self.price_per_unit = attributes[:'price_per_unit']
      end

      if attributes.key?(:'product_id')
        self.product_id = attributes[:'product_id']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @quantity.nil?
        invalid_properties.push('invalid value for "quantity", quantity cannot be nil.')
      end

      if @subscription_id.nil?
        invalid_properties.push('invalid value for "subscription_id", subscription_id cannot be nil.')
      end

      if @subscription_item_id.nil?
        invalid_properties.push('invalid value for "subscription_item_id", subscription_item_id cannot be nil.')
      end

      if @test_mode.nil?
        invalid_properties.push('invalid value for "test_mode", test_mode cannot be nil.')
      end

      if @recorded_at.nil?
        invalid_properties.push('invalid value for "recorded_at", recorded_at cannot be nil.')
      end

      if @usage_record_id.nil?
        invalid_properties.push('invalid value for "usage_record_id", usage_record_id cannot be nil.')
      end

      if @price_per_unit.nil?
        invalid_properties.push('invalid value for "price_per_unit", price_per_unit cannot be nil.')
      end

      if @product_id.nil?
        invalid_properties.push('invalid value for "product_id", product_id cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @quantity.nil?
      return false if @subscription_id.nil?
      return false if @subscription_item_id.nil?
      return false if @test_mode.nil?
      return false if @recorded_at.nil?
      return false if @usage_record_id.nil?
      return false if @price_per_unit.nil?
      return false if @product_id.nil?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          quantity == o.quantity &&
          subscription_id == o.subscription_id &&
          subscription_item_id == o.subscription_item_id &&
          test_mode == o.test_mode &&
          recorded_at == o.recorded_at &&
          usage_record_id == o.usage_record_id &&
          price_per_unit == o.price_per_unit &&
          product_id == o.product_id
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [quantity, subscription_id, subscription_item_id, test_mode, recorded_at, usage_record_id, price_per_unit, product_id].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(parse_date(value))
      when :Date
        Date.parse(parse_date(value))
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BigDecimal
        BigDecimal(value.to_s)
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        XeroRuby::AppStore.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash(downcase: false)
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        key = downcase ? attr : param
        hash[key] = _to_hash(value, downcase: downcase)
      end
      hash
    end

    # Returns the object in the form of hash with snake_case
    def to_attributes
      to_hash(downcase: true)
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value, downcase: false)
      if value.is_a?(Array)
        value.map do |v|
          v.to_hash(downcase: downcase)
        end
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.map { |k, v| hash[k] = _to_hash(v, downcase: downcase) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash(downcase: downcase)
      else
        value
      end
    end

    def parse_date(datestring)
      if datestring.include?('Date')
        date_pattern = /\/Date\((-?\d+)(\+\d+)?\)\//
        original, date, timezone = *date_pattern.match(datestring)
        date = (date.to_i / 1000)
        Time.at(date).utc.strftime('%Y-%m-%dT%H:%M:%S%z').to_s
      elsif /(\d\d\d\d)-(\d\d)/.match(datestring) # handles dates w/out Days: YYYY-MM*-DD
        Time.parse(datestring + '-01').strftime('%Y-%m-%dT%H:%M:%S').to_s
      else # handle date 'types' for small subset of payroll API's
        Time.parse(datestring).strftime('%Y-%m-%dT%H:%M:%S').to_s
      end
    end
  end
end
