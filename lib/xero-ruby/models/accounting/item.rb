=begin
#Xero Accounting API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

Contact: api@xero.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'time'
require 'date'

module XeroRuby::Accounting
  require 'bigdecimal'

  class Item
    # User defined item code (max length = 30)
    attr_accessor :code
    
    # The inventory asset account for the item. The account must be of type INVENTORY. The  COGSAccountCode in PurchaseDetails is also required to create a tracked item
    attr_accessor :inventory_asset_account_code
    
    # The name of the item (max length = 50)
    attr_accessor :name
    
    # Boolean value, defaults to true. When IsSold is true the item will be available on sales transactions in the Xero UI. If IsSold is updated to false then Description and SalesDetails values will be nulled.
    attr_accessor :is_sold
    
    # Boolean value, defaults to true. When IsPurchased is true the item is available for purchase transactions in the Xero UI. If IsPurchased is updated to false then PurchaseDescription and PurchaseDetails values will be nulled.
    attr_accessor :is_purchased
    
    # The sales description of the item (max length = 4000)
    attr_accessor :description
    
    # The purchase description of the item (max length = 4000)
    attr_accessor :purchase_description
    

    attr_accessor :purchase_details
    

    attr_accessor :sales_details
    
    # True for items that are tracked as inventory. An item will be tracked as inventory if the InventoryAssetAccountCode and COGSAccountCode are set.
    attr_accessor :is_tracked_as_inventory
    
    # The value of the item on hand. Calculated using average cost accounting.
    attr_accessor :total_cost_pool
    
    # The quantity of the item on hand
    attr_accessor :quantity_on_hand
    
    # Last modified date in UTC format
    attr_accessor :updated_date_utc
    
    # The Xero identifier for an Item
    attr_accessor :item_id
    
    # Status of object
    attr_accessor :status_attribute_string
    
    # Displays array of validation error messages from the API
    attr_accessor :validation_errors
    
    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'code' => :'Code',
        :'inventory_asset_account_code' => :'InventoryAssetAccountCode',
        :'name' => :'Name',
        :'is_sold' => :'IsSold',
        :'is_purchased' => :'IsPurchased',
        :'description' => :'Description',
        :'purchase_description' => :'PurchaseDescription',
        :'purchase_details' => :'PurchaseDetails',
        :'sales_details' => :'SalesDetails',
        :'is_tracked_as_inventory' => :'IsTrackedAsInventory',
        :'total_cost_pool' => :'TotalCostPool',
        :'quantity_on_hand' => :'QuantityOnHand',
        :'updated_date_utc' => :'UpdatedDateUTC',
        :'item_id' => :'ItemID',
        :'status_attribute_string' => :'StatusAttributeString',
        :'validation_errors' => :'ValidationErrors'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'code' => :'String',
        :'inventory_asset_account_code' => :'String',
        :'name' => :'String',
        :'is_sold' => :'Boolean',
        :'is_purchased' => :'Boolean',
        :'description' => :'String',
        :'purchase_description' => :'String',
        :'purchase_details' => :'Purchase',
        :'sales_details' => :'Purchase',
        :'is_tracked_as_inventory' => :'Boolean',
        :'total_cost_pool' => :'BigDecimal',
        :'quantity_on_hand' => :'BigDecimal',
        :'updated_date_utc' => :'DateTime',
        :'item_id' => :'String',
        :'status_attribute_string' => :'String',
        :'validation_errors' => :'Array<ValidationError>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `XeroRuby::Accounting::Item` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `XeroRuby::Accounting::Item`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'code')
        self.code = attributes[:'code']
      end

      if attributes.key?(:'inventory_asset_account_code')
        self.inventory_asset_account_code = attributes[:'inventory_asset_account_code']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'is_sold')
        self.is_sold = attributes[:'is_sold']
      end

      if attributes.key?(:'is_purchased')
        self.is_purchased = attributes[:'is_purchased']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'purchase_description')
        self.purchase_description = attributes[:'purchase_description']
      end

      if attributes.key?(:'purchase_details')
        self.purchase_details = attributes[:'purchase_details']
      end

      if attributes.key?(:'sales_details')
        self.sales_details = attributes[:'sales_details']
      end

      if attributes.key?(:'is_tracked_as_inventory')
        self.is_tracked_as_inventory = attributes[:'is_tracked_as_inventory']
      end

      if attributes.key?(:'total_cost_pool')
        self.total_cost_pool = attributes[:'total_cost_pool']
      end

      if attributes.key?(:'quantity_on_hand')
        self.quantity_on_hand = attributes[:'quantity_on_hand']
      end

      if attributes.key?(:'updated_date_utc')
        self.updated_date_utc = attributes[:'updated_date_utc']
      end

      if attributes.key?(:'item_id')
        self.item_id = attributes[:'item_id']
      end

      if attributes.key?(:'status_attribute_string')
        self.status_attribute_string = attributes[:'status_attribute_string']
      end

      if attributes.key?(:'validation_errors')
        if (value = attributes[:'validation_errors']).is_a?(Array)
          self.validation_errors = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @code.nil?
        invalid_properties.push('invalid value for "code", code cannot be nil.')
      end

      if @code.to_s.length > 30
        invalid_properties.push('invalid value for "code", the character length must be smaller than or equal to 30.')
      end

      if !@name.nil? && @name.to_s.length > 50
        invalid_properties.push('invalid value for "name", the character length must be smaller than or equal to 50.')
      end

      if !@description.nil? && @description.to_s.length > 4000
        invalid_properties.push('invalid value for "description", the character length must be smaller than or equal to 4000.')
      end

      if !@purchase_description.nil? && @purchase_description.to_s.length > 4000
        invalid_properties.push('invalid value for "purchase_description", the character length must be smaller than or equal to 4000.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @code.nil?
      return false if @code.to_s.length > 30
      return false if !@name.nil? && @name.to_s.length > 50
      return false if !@description.nil? && @description.to_s.length > 4000
      return false if !@purchase_description.nil? && @purchase_description.to_s.length > 4000
      true
    end

    # Custom attribute writer method with validation
    # @param [Object] code Value to be assigned
    def code=(code)
      if code.nil?
        fail ArgumentError, 'code cannot be nil'
      end

      if code.to_s.length > 30
        fail ArgumentError, 'invalid value for "code", the character length must be smaller than or equal to 30.'
      end

      @code = code
    end

    # Custom attribute writer method with validation
    # @param [Object] name Value to be assigned
    def name=(name)
      if !name.nil? && name.to_s.length > 50
        fail ArgumentError, 'invalid value for "name", the character length must be smaller than or equal to 50.'
      end

      @name = name
    end

    # Custom attribute writer method with validation
    # @param [Object] description Value to be assigned
    def description=(description)
      if !description.nil? && description.to_s.length > 4000
        fail ArgumentError, 'invalid value for "description", the character length must be smaller than or equal to 4000.'
      end

      @description = description
    end

    # Custom attribute writer method with validation
    # @param [Object] purchase_description Value to be assigned
    def purchase_description=(purchase_description)
      if !purchase_description.nil? && purchase_description.to_s.length > 4000
        fail ArgumentError, 'invalid value for "purchase_description", the character length must be smaller than or equal to 4000.'
      end

      @purchase_description = purchase_description
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          code == o.code &&
          inventory_asset_account_code == o.inventory_asset_account_code &&
          name == o.name &&
          is_sold == o.is_sold &&
          is_purchased == o.is_purchased &&
          description == o.description &&
          purchase_description == o.purchase_description &&
          purchase_details == o.purchase_details &&
          sales_details == o.sales_details &&
          is_tracked_as_inventory == o.is_tracked_as_inventory &&
          total_cost_pool == o.total_cost_pool &&
          quantity_on_hand == o.quantity_on_hand &&
          updated_date_utc == o.updated_date_utc &&
          item_id == o.item_id &&
          status_attribute_string == o.status_attribute_string &&
          validation_errors == o.validation_errors
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [code, inventory_asset_account_code, name, is_sold, is_purchased, description, purchase_description, purchase_details, sales_details, is_tracked_as_inventory, total_cost_pool, quantity_on_hand, updated_date_utc, item_id, status_attribute_string, validation_errors].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(parse_date(value))
      when :Date
        Date.parse(parse_date(value))
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BigDecimal
        BigDecimal(value.to_s)
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        XeroRuby::Accounting.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash(downcase: false)
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        key = downcase ? attr : param
        hash[key] = _to_hash(value, downcase: downcase)
      end
      hash
    end

    # Returns the object in the form of hash with snake_case
    def to_attributes
      to_hash(downcase: true)
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value, downcase: false)
      if value.is_a?(Array)
        value.map do |v|
          v.to_hash(downcase: downcase)
        end
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.map { |k, v| hash[k] = _to_hash(v, downcase: downcase) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash(downcase: downcase)
      else
        value
      end
    end

    def parse_date(datestring)
      if datestring.include?('Date')
        date_pattern = /\/Date\((-?\d+)(\+\d+)?\)\//
        original, date, timezone = *date_pattern.match(datestring)
        date = (date.to_i / 1000)
        Time.at(date).utc.strftime('%Y-%m-%dT%H:%M:%S%z').to_s
      else # handle date 'types' for small subset of payroll API's
        Time.parse(datestring).strftime('%Y-%m-%dT%H:%M:%S').to_s
      end
    end
  end
end
