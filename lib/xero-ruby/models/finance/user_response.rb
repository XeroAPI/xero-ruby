=begin
#Xero Finance API

#The Finance API is a collection of endpoints which customers can use in the course of a loan application, which may assist lenders to gain the confidence they need to provide capital.

Contact: api@xero.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'time'
require 'date'

module XeroRuby::Finance
  require 'bigdecimal'

  class UserResponse
    # The Xero identifier for the user
    attr_accessor :user_id
    
    # Timestamp of user creation.
    attr_accessor :user_created_date_utc
    
    # Timestamp of user last login
    attr_accessor :last_login_date_utc
    
    # User is external partner.
    attr_accessor :is_external_partner
    
    # User has Accountant role.
    attr_accessor :has_accountant_role
    
    # Month period in format  yyyy-MM.
    attr_accessor :month_period
    
    # Number of times the user has logged in.
    attr_accessor :number_of_logins
    
    # Number of documents created.
    attr_accessor :number_of_documents_created
    
    # Net value of documents created.
    attr_accessor :net_value_documents_created
    
    # Absolute value of documents created.
    attr_accessor :absolute_value_documents_created
    

    attr_accessor :attached_practices
    

    attr_accessor :history_records
    
    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'user_id' => :'userId',
        :'user_created_date_utc' => :'userCreatedDateUtc',
        :'last_login_date_utc' => :'lastLoginDateUtc',
        :'is_external_partner' => :'isExternalPartner',
        :'has_accountant_role' => :'hasAccountantRole',
        :'month_period' => :'monthPeriod',
        :'number_of_logins' => :'numberOfLogins',
        :'number_of_documents_created' => :'numberOfDocumentsCreated',
        :'net_value_documents_created' => :'netValueDocumentsCreated',
        :'absolute_value_documents_created' => :'absoluteValueDocumentsCreated',
        :'attached_practices' => :'attachedPractices',
        :'history_records' => :'historyRecords'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'user_id' => :'String',
        :'user_created_date_utc' => :'DateTime',
        :'last_login_date_utc' => :'DateTime',
        :'is_external_partner' => :'Boolean',
        :'has_accountant_role' => :'Boolean',
        :'month_period' => :'String',
        :'number_of_logins' => :'Integer',
        :'number_of_documents_created' => :'Integer',
        :'net_value_documents_created' => :'BigDecimal',
        :'absolute_value_documents_created' => :'BigDecimal',
        :'attached_practices' => :'Array<PracticeResponse>',
        :'history_records' => :'Array<HistoryRecordResponse>'
      }
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `XeroRuby::Finance::UserResponse` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `XeroRuby::Finance::UserResponse`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'user_id')
        self.user_id = attributes[:'user_id']
      end

      if attributes.key?(:'user_created_date_utc')
        self.user_created_date_utc = attributes[:'user_created_date_utc']
      end

      if attributes.key?(:'last_login_date_utc')
        self.last_login_date_utc = attributes[:'last_login_date_utc']
      end

      if attributes.key?(:'is_external_partner')
        self.is_external_partner = attributes[:'is_external_partner']
      end

      if attributes.key?(:'has_accountant_role')
        self.has_accountant_role = attributes[:'has_accountant_role']
      end

      if attributes.key?(:'month_period')
        self.month_period = attributes[:'month_period']
      end

      if attributes.key?(:'number_of_logins')
        self.number_of_logins = attributes[:'number_of_logins']
      end

      if attributes.key?(:'number_of_documents_created')
        self.number_of_documents_created = attributes[:'number_of_documents_created']
      end

      if attributes.key?(:'net_value_documents_created')
        self.net_value_documents_created = attributes[:'net_value_documents_created']
      end

      if attributes.key?(:'absolute_value_documents_created')
        self.absolute_value_documents_created = attributes[:'absolute_value_documents_created']
      end

      if attributes.key?(:'attached_practices')
        if (value = attributes[:'attached_practices']).is_a?(Array)
          self.attached_practices = value
        end
      end

      if attributes.key?(:'history_records')
        if (value = attributes[:'history_records']).is_a?(Array)
          self.history_records = value
        end
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          user_id == o.user_id &&
          user_created_date_utc == o.user_created_date_utc &&
          last_login_date_utc == o.last_login_date_utc &&
          is_external_partner == o.is_external_partner &&
          has_accountant_role == o.has_accountant_role &&
          month_period == o.month_period &&
          number_of_logins == o.number_of_logins &&
          number_of_documents_created == o.number_of_documents_created &&
          net_value_documents_created == o.net_value_documents_created &&
          absolute_value_documents_created == o.absolute_value_documents_created &&
          attached_practices == o.attached_practices &&
          history_records == o.history_records
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [user_id, user_created_date_utc, last_login_date_utc, is_external_partner, has_accountant_role, month_period, number_of_logins, number_of_documents_created, net_value_documents_created, absolute_value_documents_created, attached_practices, history_records].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(parse_date(value))
      when :Date
        Date.parse(parse_date(value))
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :BigDecimal
        BigDecimal(value.to_s)
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        XeroRuby::Finance.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash(downcase: false)
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        next if value.nil?
        key = downcase ? attr : param
        hash[key] = _to_hash(value, downcase: downcase)
      end
      hash
    end

    # Returns the object in the form of hash with snake_case
    def to_attributes
      to_hash(downcase: true)
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value, downcase: false)
      if value.is_a?(Array)
        value.map do |v|
          v.to_hash(downcase: downcase)
        end
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.map { |k, v| hash[k] = _to_hash(v, downcase: downcase) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash(downcase: downcase)
      else
        value
      end
    end

    def parse_date(datestring)
      if datestring.include?('Date')
        date_pattern = /\/Date\((-?\d+)(\+\d+)?\)\//
        original, date, timezone = *date_pattern.match(datestring)
        date = (date.to_i / 1000)
        Time.at(date).utc.strftime('%Y-%m-%dT%H:%M:%S%z').to_s
      elsif /(\d\d\d\d)-(\d\d)/.match(datestring) # handles dates w/out Days: YYYY-MM*-DD
        Time.parse(datestring + '-01').strftime('%Y-%m-%dT%H:%M:%S').to_s
      else # handle date 'types' for small subset of payroll API's
        Time.parse(datestring).strftime('%Y-%m-%dT%H:%M:%S').to_s
      end
    end
  end
end
