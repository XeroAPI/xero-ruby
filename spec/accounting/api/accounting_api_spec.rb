=begin
#Accounting API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2.1.3
Contact: api@xero.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.0

=end

require 'spec_helper'
require 'json'

# Unit tests for XeroRuby::AccountingApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'AccountingApi' do
  before do
    # run before each test
    @api_instance = XeroRuby::AccountingApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of AccountingApi' do
    it 'should create an instance of AccountingApi' do
      expect(@api_instance).to be_instance_of(XeroRuby::AccountingApi)
    end
  end

  describe 'bank statement report' do
    subject { client.accounting_api.get_report_bank_statement(tenant_id, bank_account_id) }

    # to re-run these specs you will need to copy in actual credentials
    let(:client) { XeroRuby::ApiClient.new(credentials: credentials) }
    let(:credentials) {
      {
        client_id: 'hodor',
        client_secret: 'the_door',
        redirect_uri: 'http://localhost:3000/xero/oauth2_callback',
        scopes: scopes,
        debugging: true
      }
    }
    let(:scopes) {
      [
        'offline_access', # give us a refresh token
        'accounting.reports.read',
        'accounting.transactions',
        'accounting.settings.read'
      ].join(' ')
    }
    let(:token_set) {
      {
        "scope"=>"accounting.reports.read accounting.transactions accounting.settings.read offline_access accounting.transactions.read",
        "expires_in"=>1800,
        "token_type"=>"Bearer",
        "access_token"=>"long_token_very_long_very_secure",
        "refresh_token"=>"shorter_token"
      }
    }
    let(:tenant_id) { 'tenant' }
    let(:bank_account_id) { 'AC993F75-035B-433C-82E0-7B7A2D40802C' }

    before do
      VCR.insert_cassette('accounting_api/bank_statement')
      set = client.refresh_token_set(token_set)
      client.set_token_set(set)
    end

    after { VCR.eject_cassette }

    it 'should return the right stuff' do
      expect(subject).to be_a(XeroRuby::Accounting::ReportWithRows)
    end
  end

  # unit tests for create_account
  # Allows you to create a new chart of accounts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param account Account object in body of request
  # @param [Hash] opts the optional parameters
  # @return [Accounts]
  describe 'create_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_account_attachment_by_file_name
  # Allows you to create Attachment on Account
  # @param xero_tenant_id Xero identifier for Tenant
  # @param account_id Unique identifier for Account object
  # @param file_name Name of the attachment
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'create_account_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_bank_transaction_attachment_by_file_name
  # Allows you to createa an Attachment on BankTransaction by Filename
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transaction_id Xero generated unique identifier for a bank transaction
  # @param file_name The name of the file being attached
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'create_bank_transaction_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_bank_transaction_history_record
  # Allows you to create history record for a bank transactions
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transaction_id Xero generated unique identifier for a bank transaction
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_bank_transaction_history_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_bank_transactions
  # Allows you to create one or more spend or receive money transaction
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transactions BankTransactions with an array of BankTransaction objects in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [BankTransactions]
  describe 'create_bank_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_bank_transfer
  # Allows you to create a bank transfers
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transfers BankTransfers with array of BankTransfer objects in request body
  # @param [Hash] opts the optional parameters
  # @return [BankTransfers]
  describe 'create_bank_transfer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_bank_transfer_attachment_by_file_name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transfer_id Xero generated unique identifier for a bank transfer
  # @param file_name The name of the file being attached to a Bank Transfer
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'create_bank_transfer_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_bank_transfer_history_record
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transfer_id Xero generated unique identifier for a bank transfer
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_bank_transfer_history_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_batch_payment
  # Create one or many BatchPayments for invoices
  # @param xero_tenant_id Xero identifier for Tenant
  # @param batch_payments BatchPayments with an array of Payments in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [BatchPayments]
  describe 'create_batch_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_batch_payment_history_record
  # Allows you to create a history record for a Batch Payment
  # @param xero_tenant_id Xero identifier for Tenant
  # @param batch_payment_id Unique identifier for BatchPayment
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_batch_payment_history_record test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_branding_theme_payment_services
  # Allow for the creation of new custom payment service for specified Branding Theme
  # @param xero_tenant_id Xero identifier for Tenant
  # @param branding_theme_id Unique identifier for a Branding Theme
  # @param payment_service PaymentService object in body of request
  # @param [Hash] opts the optional parameters
  # @return [PaymentServices]
  describe 'create_branding_theme_payment_services test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contact_attachment_by_file_name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param file_name Name for the file you are attaching
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'create_contact_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contact_group
  # Allows you to create a contact group
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_groups ContactGroups with an array of names in request body
  # @param [Hash] opts the optional parameters
  # @return [ContactGroups]
  describe 'create_contact_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contact_group_contacts
  # Allows you to add Contacts to a Contact Group
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_group_id Unique identifier for a Contact Group
  # @param contacts Contacts with array of contacts specifiying the ContactID to be added to ContactGroup in body of request
  # @param [Hash] opts the optional parameters
  # @return [Contacts]
  describe 'create_contact_group_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contact_history
  # Allows you to retrieve a history records of an Contact
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_contact_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_contacts
  # Allows you to create a multiple contacts (bulk) in a Xero organisation
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contacts Contacts with an array of Contact objects to create in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [Contacts]
  describe 'create_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_credit_note_allocation
  # Allows you to create Allocation on CreditNote
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param allocations Allocations with array of Allocation object in body of request.
  # @param [Hash] opts the optional parameters
  # @return [Allocations]
  describe 'create_credit_note_allocation test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_credit_note_attachment_by_file_name
  # Allows you to create Attachments on CreditNote by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param file_name Name of the file you are attaching to Credit Note
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_online Allows an attachment to be seen by the end customer within their online invoice
  # @return [Attachments]
  describe 'create_credit_note_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_credit_note_history
  # Allows you to retrieve a history records of an CreditNote
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_credit_note_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_credit_notes
  # Allows you to create a credit note
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_notes Credit Notes with array of CreditNote object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [CreditNotes]
  describe 'create_credit_notes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_currency
  # @param xero_tenant_id Xero identifier for Tenant
  # @param currency Currency obejct in the body of request
  # @param [Hash] opts the optional parameters
  # @return [Currencies]
  describe 'create_currency test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_employees
  # Allows you to create new employees used in Xero payrun
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employees Employees with array of Employee object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [Employees]
  describe 'create_employees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_expense_claim_history
  # Allows you to create a history records of an ExpenseClaim
  # @param xero_tenant_id Xero identifier for Tenant
  # @param expense_claim_id Unique identifier for a ExpenseClaim
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_expense_claim_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_expense_claims
  # Allows you to retrieve expense claims
  # @param xero_tenant_id Xero identifier for Tenant
  # @param expense_claims ExpenseClaims with array of ExpenseClaim object in body of request
  # @param [Hash] opts the optional parameters
  # @return [ExpenseClaims]
  describe 'create_expense_claims test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_invoice_attachment_by_file_name
  # Allows you to create an Attachment on invoices or purchase bills by it&#39;s filename
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param file_name Name of the file you are attaching
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_online Allows an attachment to be seen by the end customer within their online invoice
  # @return [Attachments]
  describe 'create_invoice_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_invoice_history
  # Allows you to retrieve a history records of an invoice
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_invoice_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_invoices
  # Allows you to create one or more sales invoices or purchase bills
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoices Invoices with an array of invoice objects in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Invoices]
  describe 'create_invoices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_item_history
  # Allows you to create a history record for items
  # @param xero_tenant_id Xero identifier for Tenant
  # @param item_id Unique identifier for an Item
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_item_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_items
  # Allows you to create one or more items
  # @param xero_tenant_id Xero identifier for Tenant
  # @param items Items with an array of Item objects in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Items]
  describe 'create_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_linked_transaction
  # Allows you to create linked transactions (billable expenses)
  # @param xero_tenant_id Xero identifier for Tenant
  # @param linked_transaction LinkedTransaction object in body of request
  # @param [Hash] opts the optional parameters
  # @return [LinkedTransactions]
  describe 'create_linked_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_manual_journal_attachment_by_file_name
  # Allows you to create a specified Attachment on ManualJournal by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param manual_journal_id Unique identifier for a ManualJournal
  # @param file_name The name of the file being attached to a ManualJournal
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'create_manual_journal_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_manual_journals
  # Allows you to create one or more manual journals
  # @param xero_tenant_id Xero identifier for Tenant
  # @param manual_journals ManualJournals array with ManualJournal object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [ManualJournals]
  describe 'create_manual_journals test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_overpayment_allocations
  # Allows you to create a single allocation for an overpayment
  # @param xero_tenant_id Xero identifier for Tenant
  # @param overpayment_id Unique identifier for a Overpayment
  # @param allocations Allocations array with Allocation object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [Allocations]
  describe 'create_overpayment_allocations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_overpayment_history
  # Allows you to create history records of an Overpayment
  # @param xero_tenant_id Xero identifier for Tenant
  # @param overpayment_id Unique identifier for a Overpayment
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_overpayment_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_payment
  # Allows you to create a single payment for invoices or credit notes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payment Request body with a single Payment object
  # @param [Hash] opts the optional parameters
  # @return [Payments]
  describe 'create_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_payment_history
  # Allows you to create a history record for a payment
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payment_id Unique identifier for a Payment
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_payment_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_payment_service
  # Allows you to create payment services
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payment_services PaymentServices array with PaymentService object in body of request
  # @param [Hash] opts the optional parameters
  # @return [PaymentServices]
  describe 'create_payment_service test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_payments
  # Allows you to create multiple payments for invoices or credit notes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payments Payments array with Payment object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [Payments]
  describe 'create_payments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_prepayment_allocations
  # Allows you to create an Allocation for prepayments
  # @param xero_tenant_id Xero identifier for Tenant
  # @param prepayment_id Unique identifier for Prepayment
  # @param allocations Allocations with an array of Allocation object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [Allocations]
  describe 'create_prepayment_allocations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_prepayment_history
  # Allows you to create a history record for an Prepayment
  # @param xero_tenant_id Xero identifier for Tenant
  # @param prepayment_id Unique identifier for a PrePayment
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_prepayment_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_purchase_order_history
  # Allows you to create HistoryRecord for purchase orders
  # @param xero_tenant_id Xero identifier for Tenant
  # @param purchase_order_id Unique identifier for a PurchaseOrder
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_purchase_order_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_purchase_orders
  # Allows you to create one or more purchase orders
  # @param xero_tenant_id Xero identifier for Tenant
  # @param purchase_orders PurchaseOrders with an array of PurchaseOrder object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [PurchaseOrders]
  describe 'create_purchase_orders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_quote_attachment_by_file_name
  # Allows you to create Attachment on Quote
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quote_id Unique identifier for Quote object
  # @param file_name Name of the attachment
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'create_quote_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_quote_history
  # Allows you to retrieve a history records of an quote
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quote_id Unique identifier for an Quote
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_quote_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_quotes
  # Allows you to create one or more quotes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quotes Quotes with an array of Quote object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [Quotes]
  describe 'create_quotes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_receipt
  # Allows you to create draft expense claim receipts for any user
  # @param xero_tenant_id Xero identifier for Tenant
  # @param receipts Receipts with an array of Receipt object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Receipts]
  describe 'create_receipt test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_receipt_attachment_by_file_name
  # Allows you to create Attachment on expense claim receipts by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param receipt_id Unique identifier for a Receipt
  # @param file_name The name of the file being attached to the Receipt
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'create_receipt_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_receipt_history
  # Allows you to retrieve a history records of an Receipt
  # @param xero_tenant_id Xero identifier for Tenant
  # @param receipt_id Unique identifier for a Receipt
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_receipt_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_repeating_invoice_attachment_by_file_name
  # Allows you to create attachment on repeating invoices by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param repeating_invoice_id Unique identifier for a Repeating Invoice
  # @param file_name The name of the file being attached to a Repeating Invoice
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'create_repeating_invoice_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_repeating_invoice_history
  # Allows you to create history for a repeating invoice
  # @param xero_tenant_id Xero identifier for Tenant
  # @param repeating_invoice_id Unique identifier for a Repeating Invoice
  # @param history_records HistoryRecords containing an array of HistoryRecord objects in body of request
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'create_repeating_invoice_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_tax_rates
  # Allows you to create one or more Tax Rates
  # @param xero_tenant_id Xero identifier for Tenant
  # @param tax_rates TaxRates array with TaxRate object in body of request
  # @param [Hash] opts the optional parameters
  # @return [TaxRates]
  describe 'create_tax_rates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_tracking_category
  # Allows you to create tracking categories
  # @param xero_tenant_id Xero identifier for Tenant
  # @param tracking_category TrackingCategory object in body of request
  # @param [Hash] opts the optional parameters
  # @return [TrackingCategories]
  describe 'create_tracking_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for create_tracking_options
  # Allows you to create options for a specified tracking category
  # @param xero_tenant_id Xero identifier for Tenant
  # @param tracking_category_id Unique identifier for a TrackingCategory
  # @param tracking_option TrackingOption object in body of request
  # @param [Hash] opts the optional parameters
  # @return [TrackingOptions]
  describe 'create_tracking_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_account
  # Allows you to delete a chart of accounts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param account_id Unique identifier for retrieving single object
  # @param [Hash] opts the optional parameters
  # @return [Accounts]
  describe 'delete_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact_group_contact
  # Allows you to delete a specific Contact from a Contact Group
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_group_id Unique identifier for a Contact Group
  # @param contact_id Unique identifier for a Contact
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contact_group_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_contact_group_contacts
  # Allows you to delete  all Contacts from a Contact Group
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_group_id Unique identifier for a Contact Group
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_contact_group_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_item
  # Allows you to delete a specified item
  # @param xero_tenant_id Xero identifier for Tenant
  # @param item_id Unique identifier for an Item
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_linked_transaction
  # Allows you to delete a specified linked transactions (billable expenses)
  # @param xero_tenant_id Xero identifier for Tenant
  # @param linked_transaction_id Unique identifier for a LinkedTransaction
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'delete_linked_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_payment
  # Allows you to update a specified payment for invoices and credit notes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payment_id Unique identifier for a Payment
  # @param payment_delete
  # @param [Hash] opts the optional parameters
  # @return [Payments]
  describe 'delete_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_tracking_category
  # Allows you to delete tracking categories
  # @param xero_tenant_id Xero identifier for Tenant
  # @param tracking_category_id Unique identifier for a TrackingCategory
  # @param [Hash] opts the optional parameters
  # @return [TrackingCategories]
  describe 'delete_tracking_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for delete_tracking_options
  # Allows you to delete a specified option for a specified tracking category
  # @param xero_tenant_id Xero identifier for Tenant
  # @param tracking_category_id Unique identifier for a TrackingCategory
  # @param tracking_option_id Unique identifier for a Tracking Option
  # @param [Hash] opts the optional parameters
  # @return [TrackingOptions]
  describe 'delete_tracking_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for email_invoice
  # Allows you to email a copy of invoice to related Contact
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param request_empty
  # @param [Hash] opts the optional parameters
  # @return [nil]
  describe 'email_invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account
  # Allows you to retrieve a single chart of accounts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param account_id Unique identifier for retrieving single object
  # @param [Hash] opts the optional parameters
  # @return [Accounts]
  describe 'get_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_attachment_by_file_name
  # Allows you to retrieve Attachment on Account by Filename
  # @param xero_tenant_id Xero identifier for Tenant
  # @param account_id Unique identifier for Account object
  # @param file_name Name of the attachment
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_account_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_attachment_by_id
  # Allows you to retrieve specific Attachment on Account
  # @param xero_tenant_id Xero identifier for Tenant
  # @param account_id Unique identifier for Account object
  # @param attachment_id Unique identifier for Attachment object
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_account_attachment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_account_attachments
  # Allows you to retrieve Attachments for accounts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param account_id Unique identifier for Account object
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'get_account_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_accounts
  # Allows you to retrieve the full chart of accounts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @return [Accounts]
  describe 'get_accounts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transaction
  # Allows you to retrieve a single spend or receive money transaction
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transaction_id Xero generated unique identifier for a bank transaction
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [BankTransactions]
  describe 'get_bank_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transaction_attachment_by_file_name
  # Allows you to retrieve Attachments on BankTransaction by Filename
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transaction_id Xero generated unique identifier for a bank transaction
  # @param file_name The name of the file being attached
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_bank_transaction_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transaction_attachment_by_id
  # Allows you to retrieve Attachments on a specific BankTransaction
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transaction_id Xero generated unique identifier for a bank transaction
  # @param attachment_id Xero generated unique identifier for an attachment
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_bank_transaction_attachment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transaction_attachments
  # Allows you to retrieve any attachments to bank transactions
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transaction_id Xero generated unique identifier for a bank transaction
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'get_bank_transaction_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transactions
  # Allows you to retrieve any spend or receive money transactions
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page Up to 100 bank transactions will be returned in a single API call with line items details
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [BankTransactions]
  describe 'get_bank_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transactions_history
  # Allows you to retrieve history from a bank transactions
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transaction_id Xero generated unique identifier for a bank transaction
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_bank_transactions_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transfer
  # Allows you to retrieve any bank transfers
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transfer_id Xero generated unique identifier for a bank transfer
  # @param [Hash] opts the optional parameters
  # @return [BankTransfers]
  describe 'get_bank_transfer test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transfer_attachment_by_file_name
  # Allows you to retrieve Attachments on BankTransfer by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transfer_id Xero generated unique identifier for a bank transfer
  # @param file_name The name of the file being attached to a Bank Transfer
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_bank_transfer_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transfer_attachment_by_id
  # Allows you to retrieve Attachments on BankTransfer
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transfer_id Xero generated unique identifier for a bank transfer
  # @param attachment_id Xero generated unique identifier for an Attachment to a bank transfer
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_bank_transfer_attachment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transfer_attachments
  # Allows you to retrieve Attachments from  bank transfers
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transfer_id Xero generated unique identifier for a bank transfer
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'get_bank_transfer_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transfer_history
  # Allows you to retrieve history from a bank transfers
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transfer_id Xero generated unique identifier for a bank transfer
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_bank_transfer_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_bank_transfers
  # Allows you to retrieve all bank transfers
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @return [BankTransfers]
  describe 'get_bank_transfers test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_batch_payment_history
  # Allows you to retrieve history from a Batch Payment
  # @param xero_tenant_id Xero identifier for Tenant
  # @param batch_payment_id Unique identifier for BatchPayment
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_batch_payment_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_batch_payments
  # Retrieve either one or many BatchPayments for invoices
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @return [BatchPayments]
  describe 'get_batch_payments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_branding_theme
  # Allows you to retrieve a specific BrandingThemes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param branding_theme_id Unique identifier for a Branding Theme
  # @param [Hash] opts the optional parameters
  # @return [BrandingThemes]
  describe 'get_branding_theme test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_branding_theme_payment_services
  # Allows you to retrieve the Payment services for a Branding Theme
  # @param xero_tenant_id Xero identifier for Tenant
  # @param branding_theme_id Unique identifier for a Branding Theme
  # @param [Hash] opts the optional parameters
  # @return [PaymentServices]
  describe 'get_branding_theme_payment_services test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_branding_themes
  # Allows you to retrieve all the BrandingThemes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @return [BrandingThemes]
  describe 'get_branding_themes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact
  # Allows you to retrieve a single contacts in a Xero organisation
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param [Hash] opts the optional parameters
  # @return [Contacts]
  describe 'get_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_attachment_by_file_name
  # Allows you to retrieve Attachments on Contacts by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param file_name Name for the file you are attaching
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_contact_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_attachment_by_id
  # Allows you to retrieve Attachments on Contacts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param attachment_id Unique identifier for a Attachment
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_contact_attachment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_attachments
  # Allows you to retrieve, add and update contacts in a Xero organisation
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'get_contact_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_cis_settings
  # Allows you to retrieve CISSettings for a contact in a Xero organisation
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param [Hash] opts the optional parameters
  # @return [CISSettings]
  describe 'get_contact_cis_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_group
  # Allows you to retrieve a unique Contact Group by ID
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_group_id Unique identifier for a Contact Group
  # @param [Hash] opts the optional parameters
  # @return [ContactGroups]
  describe 'get_contact_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_groups
  # Allows you to retrieve the ContactID and Name of all the contacts in a contact group
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @return [ContactGroups]
  describe 'get_contact_groups test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contact_history
  # Allows you to retrieve a history records of an Contact
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_contact_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_contacts
  # Allows you to retrieve all contacts in a Xero organisation
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Array<String>] :i_ds Filter by a comma separated list of ContactIDs. Allows you to retrieve a specific set of contacts in a single call.
  # @option opts [Integer] :page e.g. page&#x3D;1 - Up to 100 contacts will be returned in a single API call.
  # @option opts [Boolean] :include_archived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response
  # @return [Contacts]
  describe 'get_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_credit_note
  # Allows you to retrieve a specific credit note
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [CreditNotes]
  describe 'get_credit_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_credit_note_as_pdf
  # Allows you to retrieve Credit Note as PDF files
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_credit_note_as_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_credit_note_attachment_by_file_name
  # Allows you to retrieve Attachments on CreditNote by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param file_name Name of the file you are attaching to Credit Note
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_credit_note_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_credit_note_attachment_by_id
  # Allows you to retrieve Attachments on CreditNote
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param attachment_id Unique identifier for a Attachment
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_credit_note_attachment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_credit_note_attachments
  # Allows you to retrieve Attachments for credit notes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'get_credit_note_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_credit_note_history
  # Allows you to retrieve a history records of an CreditNote
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_credit_note_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_credit_notes
  # Allows you to retrieve any credit notes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 â€“ Up to 100 credit notes will be returned in a single API call with line items shown for each credit note
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [CreditNotes]
  describe 'get_credit_notes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_currencies
  # Allows you to retrieve currencies for your organisation
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @return [Currencies]
  describe 'get_currencies test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employee
  # Allows you to retrieve a specific employee used in Xero payrun
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employee_id Unique identifier for a Employee
  # @param [Hash] opts the optional parameters
  # @return [Employees]
  describe 'get_employee test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_employees
  # Allows you to retrieve employees used in Xero payrun
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @return [Employees]
  describe 'get_employees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_expense_claim
  # Allows you to retrieve a specified expense claim
  # @param xero_tenant_id Xero identifier for Tenant
  # @param expense_claim_id Unique identifier for a ExpenseClaim
  # @param [Hash] opts the optional parameters
  # @return [ExpenseClaims]
  describe 'get_expense_claim test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_expense_claim_history
  # Allows you to retrieve a history records of an ExpenseClaim
  # @param xero_tenant_id Xero identifier for Tenant
  # @param expense_claim_id Unique identifier for a ExpenseClaim
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_expense_claim_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_expense_claims
  # Allows you to retrieve expense claims
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @return [ExpenseClaims]
  describe 'get_expense_claims test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoice
  # Allows you to retrieve a specified sales invoice or purchase bill
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Invoices]
  describe 'get_invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoice_as_pdf
  # Allows you to retrieve invoices or purchase bills as PDF files
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_invoice_as_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoice_attachment_by_file_name
  # Allows you to retrieve Attachment on invoices or purchase bills by it&#39;s filename
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param file_name Name of the file you are attaching
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_invoice_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoice_attachment_by_id
  # Allows you to retrieve a specified Attachment on invoices or purchase bills by it&#39;s ID
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param attachment_id Unique identifier for an Attachment
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_invoice_attachment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoice_attachments
  # Allows you to retrieve Attachments on invoices or purchase bills
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'get_invoice_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoice_history
  # Allows you to retrieve a history records of an invoice
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_invoice_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoice_reminders
  # Allows you to retrieve invoice reminder settings
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @return [InvoiceReminders]
  describe 'get_invoice_reminders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_invoices
  # Allows you to retrieve any sales invoices or purchase bills
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Array<String>] :i_ds Filter by a comma-separated list of InvoicesIDs.
  # @option opts [Array<String>] :invoice_numbers Filter by a comma-separated list of InvoiceNumbers.
  # @option opts [Array<String>] :contact_i_ds Filter by a comma-separated list of ContactIDs.
  # @option opts [Array<String>] :statuses Filter by a comma-separated list Statuses. For faster response times we recommend using these explicit parameters instead of passing OR conditions into the Where filter.
  # @option opts [Integer] :page e.g. page&#x3D;1 â€“ Up to 100 invoices will be returned in a single API call with line items shown for each invoice
  # @option opts [Boolean] :include_archived e.g. includeArchived&#x3D;true - Contacts with a status of ARCHIVED will be included in the response
  # @option opts [Boolean] :created_by_my_app When set to true you&#39;ll only retrieve Invoices created by your app
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Invoices]
  describe 'get_invoices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_item
  # Allows you to retrieve a specified item
  # @param xero_tenant_id Xero identifier for Tenant
  # @param item_id Unique identifier for an Item
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Items]
  describe 'get_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_item_history
  # Allows you to retrieve history for items
  # @param xero_tenant_id Xero identifier for Tenant
  # @param item_id Unique identifier for an Item
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_item_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_items
  # Allows you to retrieve any items
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Items]
  describe 'get_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_journal
  # Allows you to retrieve a specified journals.
  # @param xero_tenant_id Xero identifier for Tenant
  # @param journal_id Unique identifier for a Journal
  # @param [Hash] opts the optional parameters
  # @return [Journals]
  describe 'get_journal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_journals
  # Allows you to retrieve any journals.
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [Integer] :offset Offset by a specified journal number. e.g. journals with a JournalNumber greater than the offset will be returned
  # @option opts [Boolean] :payments_only Filter to retrieve journals on a cash basis. Journals are returned on an accrual basis by default.
  # @return [Journals]
  describe 'get_journals test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_linked_transaction
  # Allows you to retrieve a specified linked transactions (billable expenses)
  # @param xero_tenant_id Xero identifier for Tenant
  # @param linked_transaction_id Unique identifier for a LinkedTransaction
  # @param [Hash] opts the optional parameters
  # @return [LinkedTransactions]
  describe 'get_linked_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_linked_transactions
  # Retrieve linked transactions (billable expenses)
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :page Up to 100 linked transactions will be returned in a single API call. Use the page parameter to specify the page to be returned e.g. page&#x3D;1.
  # @option opts [String] :linked_transaction_id The Xero identifier for an Linked Transaction
  # @option opts [String] :source_transaction_id Filter by the SourceTransactionID. Get the linked transactions created from a particular ACCPAY invoice
  # @option opts [String] :contact_id Filter by the ContactID. Get all the linked transactions that have been assigned to a particular customer.
  # @option opts [String] :status Filter by the combination of ContactID and Status. Get  the linked transactions associaed to a  customer and with a status
  # @option opts [String] :target_transaction_id Filter by the TargetTransactionID. Get all the linked transactions allocated to a particular ACCREC invoice
  # @return [LinkedTransactions]
  describe 'get_linked_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_manual_journal
  # Allows you to retrieve a specified manual journals
  # @param xero_tenant_id Xero identifier for Tenant
  # @param manual_journal_id Unique identifier for a ManualJournal
  # @param [Hash] opts the optional parameters
  # @return [ManualJournals]
  describe 'get_manual_journal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_manual_journal_attachment_by_file_name
  # Allows you to retrieve specified Attachment on ManualJournal by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param manual_journal_id Unique identifier for a ManualJournal
  # @param file_name The name of the file being attached to a ManualJournal
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_manual_journal_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_manual_journal_attachment_by_id
  # Allows you to retrieve specified Attachment on ManualJournals
  # @param xero_tenant_id Xero identifier for Tenant
  # @param manual_journal_id Unique identifier for a ManualJournal
  # @param attachment_id Unique identifier for a Attachment
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_manual_journal_attachment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_manual_journal_attachments
  # Allows you to retrieve Attachment for manual journals
  # @param xero_tenant_id Xero identifier for Tenant
  # @param manual_journal_id Unique identifier for a ManualJournal
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'get_manual_journal_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_manual_journals
  # Allows you to retrieve any manual journals
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 â€“ Up to 100 manual journals will be returned in a single API call with line items shown for each overpayment
  # @return [ManualJournals]
  describe 'get_manual_journals test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_online_invoice
  # Allows you to retrieve a URL to an online invoice
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param [Hash] opts the optional parameters
  # @return [OnlineInvoices]
  describe 'get_online_invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_organisation_cis_settings
  # Allows you To verify if an organisation is using contruction industry scheme, you can retrieve the CIS settings for the organistaion.
  # @param xero_tenant_id Xero identifier for Tenant
  # @param organisation_id The unique Xero identifier for an organisation
  # @param [Hash] opts the optional parameters
  # @return [CISOrgSetting]
  describe 'get_organisation_cis_settings test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_organisations
  # Allows you to retrieve Organisation details
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @return [Organisations]
  describe 'get_organisations test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_overpayment
  # Allows you to retrieve a specified overpayments
  # @param xero_tenant_id Xero identifier for Tenant
  # @param overpayment_id Unique identifier for a Overpayment
  # @param [Hash] opts the optional parameters
  # @return [Overpayments]
  describe 'get_overpayment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_overpayment_history
  # Allows you to retrieve a history records of an Overpayment
  # @param xero_tenant_id Xero identifier for Tenant
  # @param overpayment_id Unique identifier for a Overpayment
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_overpayment_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_overpayments
  # Allows you to retrieve overpayments
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 â€“ Up to 100 overpayments will be returned in a single API call with line items shown for each overpayment
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Overpayments]
  describe 'get_overpayments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payment
  # Allows you to retrieve a specified payment for invoices and credit notes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payment_id Unique identifier for a Payment
  # @param [Hash] opts the optional parameters
  # @return [Payments]
  describe 'get_payment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payment_history
  # Allows you to retrieve history records of a payment
  # @param xero_tenant_id Xero identifier for Tenant
  # @param payment_id Unique identifier for a Payment
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_payment_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payment_services
  # Allows you to retrieve payment services
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @return [PaymentServices]
  describe 'get_payment_services test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_payments
  # Allows you to retrieve payments for invoices and credit notes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @return [Payments]
  describe 'get_payments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_prepayment
  # Allows you to retrieve a specified prepayments
  # @param xero_tenant_id Xero identifier for Tenant
  # @param prepayment_id Unique identifier for a PrePayment
  # @param [Hash] opts the optional parameters
  # @return [Prepayments]
  describe 'get_prepayment test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_prepayment_as_pdf
  # Allows you to retrieve prepayments as PDF files
  # @param xero_tenant_id Xero identifier for Tenant
  # @param prepayment_id Unique identifier for a PrePayment
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_prepayment_as_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_prepayment_history
  # Allows you to retrieve a history records of an Prepayment
  # @param xero_tenant_id Xero identifier for Tenant
  # @param prepayment_id Unique identifier for a PrePayment
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_prepayment_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_prepayments
  # Allows you to retrieve prepayments
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page e.g. page&#x3D;1 â€“ Up to 100 prepayments will be returned in a single API call with line items shown for each overpayment
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Prepayments]
  describe 'get_prepayments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_purchase_order
  # Allows you to retrieve a specified purchase orders
  # @param xero_tenant_id Xero identifier for Tenant
  # @param purchase_order_id Unique identifier for a PurchaseOrder
  # @param [Hash] opts the optional parameters
  # @return [PurchaseOrders]
  describe 'get_purchase_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_purchase_order_as_pdf
  # Allows you to retrieve purchase orders as PDF files
  # @param xero_tenant_id Xero identifier for Tenant
  # @param purchase_order_id Unique identifier for an Purchase Order
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_purchase_order_as_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_purchase_order_by_number
  # Allows you to retrieve a specified purchase orders
  # @param xero_tenant_id Xero identifier for Tenant
  # @param purchase_order_number Unique identifier for a PurchaseOrder
  # @param [Hash] opts the optional parameters
  # @return [PurchaseOrders]
  describe 'get_purchase_order_by_number test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_purchase_order_history
  # Allows you to retrieve history for PurchaseOrder
  # @param xero_tenant_id Xero identifier for Tenant
  # @param purchase_order_id Unique identifier for a PurchaseOrder
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_purchase_order_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_purchase_orders
  # Allows you to retrieve purchase orders
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :status Filter by purchase order status
  # @option opts [String] :date_from Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31
  # @option opts [String] :date_to Filter by purchase order date (e.g. GET https://.../PurchaseOrders?DateFrom&#x3D;2015-12-01&amp;DateTo&#x3D;2015-12-31
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :page To specify a page, append the page parameter to the URL e.g. ?page&#x3D;1. If there are 100 records in the response you will need to check if there is any more data by fetching the next page e.g ?page&#x3D;2 and continuing this process until no more results are returned.
  # @return [PurchaseOrders]
  describe 'get_purchase_orders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_quote
  # Allows you to retrieve a specified quote
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quote_id Unique identifier for an Quote
  # @param [Hash] opts the optional parameters
  # @return [Quotes]
  describe 'get_quote test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_quote_as_pdf
  # Allows you to retrieve quotes as PDF files
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quote_id Unique identifier for an Quote
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_quote_as_pdf test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_quote_attachment_by_file_name
  # Allows you to retrieve Attachment on Quote by Filename
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quote_id Unique identifier for Quote object
  # @param file_name Name of the attachment
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_quote_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_quote_attachment_by_id
  # Allows you to retrieve specific Attachment on Quote
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quote_id Unique identifier for Quote object
  # @param attachment_id Unique identifier for Attachment object
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_quote_attachment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_quote_attachments
  # Allows you to retrieve Attachments for Quotes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quote_id Unique identifier for Quote object
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'get_quote_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_quote_history
  # Allows you to retrieve a history records of an quote
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quote_id Unique identifier for an Quote
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_quote_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_quotes
  # Allows you to retrieve any sales quotes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [Date] :date_from Filter for quotes after a particular date
  # @option opts [Date] :date_to Filter for quotes before a particular date
  # @option opts [Date] :expiry_date_from Filter for quotes expiring after a particular date
  # @option opts [Date] :expiry_date_to Filter for quotes before a particular date
  # @option opts [String] :contact_id Filter for quotes belonging to a particular contact
  # @option opts [String] :status Filter for quotes of a particular Status
  # @option opts [Integer] :page e.g. page&#x3D;1 â€“ Up to 100 Quotes will be returned in a single API call with line items shown for each quote
  # @option opts [String] :order Order by an any element
  # @return [Quotes]
  describe 'get_quotes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_receipt
  # Allows you to retrieve a specified draft expense claim receipts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param receipt_id Unique identifier for a Receipt
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Receipts]
  describe 'get_receipt test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_receipt_attachment_by_file_name
  # Allows you to retrieve Attachments on expense claim receipts by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param receipt_id Unique identifier for a Receipt
  # @param file_name The name of the file being attached to the Receipt
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_receipt_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_receipt_attachment_by_id
  # Allows you to retrieve Attachments on expense claim receipts by ID
  # @param xero_tenant_id Xero identifier for Tenant
  # @param receipt_id Unique identifier for a Receipt
  # @param attachment_id Unique identifier for a Attachment
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_receipt_attachment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_receipt_attachments
  # Allows you to retrieve Attachments for expense claim receipts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param receipt_id Unique identifier for a Receipt
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'get_receipt_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_receipt_history
  # Allows you to retrieve a history records of an Receipt
  # @param xero_tenant_id Xero identifier for Tenant
  # @param receipt_id Unique identifier for a Receipt
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_receipt_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_receipts
  # Allows you to retrieve draft expense claim receipts for any user
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Receipts]
  describe 'get_receipts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repeating_invoice
  # Allows you to retrieve a specified repeating invoice
  # @param xero_tenant_id Xero identifier for Tenant
  # @param repeating_invoice_id Unique identifier for a Repeating Invoice
  # @param [Hash] opts the optional parameters
  # @return [RepeatingInvoices]
  describe 'get_repeating_invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repeating_invoice_attachment_by_file_name
  # Allows you to retrieve specified attachment on repeating invoices by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param repeating_invoice_id Unique identifier for a Repeating Invoice
  # @param file_name The name of the file being attached to a Repeating Invoice
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_repeating_invoice_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repeating_invoice_attachment_by_id
  # Allows you to retrieve a specified Attachments on repeating invoices
  # @param xero_tenant_id Xero identifier for Tenant
  # @param repeating_invoice_id Unique identifier for a Repeating Invoice
  # @param attachment_id Unique identifier for a Attachment
  # @param content_type The mime type of the attachment file you are retrieving i.e image/jpg, application/pdf
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'get_repeating_invoice_attachment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repeating_invoice_attachments
  # Allows you to retrieve Attachments on repeating invoice
  # @param xero_tenant_id Xero identifier for Tenant
  # @param repeating_invoice_id Unique identifier for a Repeating Invoice
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'get_repeating_invoice_attachments test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repeating_invoice_history
  # Allows you to retrieve history for a repeating invoice
  # @param xero_tenant_id Xero identifier for Tenant
  # @param repeating_invoice_id Unique identifier for a Repeating Invoice
  # @param [Hash] opts the optional parameters
  # @return [HistoryRecords]
  describe 'get_repeating_invoice_history test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_repeating_invoices
  # Allows you to retrieve any repeating invoices
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @return [RepeatingInvoices]
  describe 'get_repeating_invoices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_aged_payables_by_contact
  # Allows you to retrieve report for AgedPayablesByContact
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date The date of the Aged Payables By Contact report
  # @option opts [Date] :from_date The from date of the Aged Payables By Contact report
  # @option opts [Date] :to_date The to date of the Aged Payables By Contact report
  # @return [ReportWithRows]
  describe 'get_report_aged_payables_by_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_aged_receivables_by_contact
  # Allows you to retrieve report for AgedReceivablesByContact
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date The date of the Aged Receivables By Contact report
  # @option opts [Date] :from_date The from date of the Aged Receivables By Contact report
  # @option opts [Date] :to_date The to date of the Aged Receivables By Contact report
  # @return [ReportWithRows]
  describe 'get_report_aged_receivables_by_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_ba_sor_gst
  # Allows you to retrieve report for BAS only valid for AU orgs
  # @param xero_tenant_id Xero identifier for Tenant
  # @param report_id Unique identifier for a Report
  # @param [Hash] opts the optional parameters
  # @return [ReportWithRows]
  describe 'get_report_ba_sor_gst test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_ba_sor_gst_list
  # Allows you to retrieve report for BAS only valid for AU orgs
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @return [ReportWithRows]
  describe 'get_report_ba_sor_gst_list test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_balance_sheet
  # Allows you to retrieve report for BalanceSheet
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :date The date of the Balance Sheet report
  # @option opts [Integer] :periods The number of periods for the Balance Sheet report
  # @option opts [String] :timeframe The period size to compare to (MONTH, QUARTER, YEAR)
  # @option opts [String] :tracking_option_id1 The tracking option 1 for the Balance Sheet report
  # @option opts [String] :tracking_option_id2 The tracking option 2 for the Balance Sheet report
  # @option opts [Boolean] :standard_layout The standard layout boolean for the Balance Sheet report
  # @option opts [Boolean] :payments_only return a cash basis for the Balance Sheet report
  # @return [ReportWithRows]
  describe 'get_report_balance_sheet test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_bank_summary
  # Allows you to retrieve report for BankSummary
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :from_date The from date for the Bank Summary report e.g. 2018-03-31
  # @option opts [Date] :to_date The to date for the Bank Summary report e.g. 2018-03-31
  # @return [ReportWithRows]
  describe 'get_report_bank_summary test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_budget_summary
  # Allows you to retrieve report for Budget Summary
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date The date for the Bank Summary report e.g. 2018-03-31
  # @option opts [Integer] :period The number of periods to compare (integer between 1 and 12)
  # @option opts [Integer] :timeframe The period size to compare to (1&#x3D;month, 3&#x3D;quarter, 12&#x3D;year)
  # @return [ReportWithRows]
  describe 'get_report_budget_summary test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_executive_summary
  # Allows you to retrieve report for ExecutiveSummary
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date The date for the Bank Summary report e.g. 2018-03-31
  # @return [ReportWithRows]
  describe 'get_report_executive_summary test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_profit_and_loss
  # Allows you to retrieve report for ProfitAndLoss
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :from_date The from date for the ProfitAndLoss report e.g. 2018-03-31
  # @option opts [Date] :to_date The to date for the ProfitAndLoss report e.g. 2018-03-31
  # @option opts [Integer] :periods The number of periods to compare (integer between 1 and 12)
  # @option opts [String] :timeframe The period size to compare to (MONTH, QUARTER, YEAR)
  # @option opts [String] :tracking_category_id The trackingCategory 1 for the ProfitAndLoss report
  # @option opts [String] :tracking_category_id2 The trackingCategory 2 for the ProfitAndLoss report
  # @option opts [String] :tracking_option_id The tracking option 1 for the ProfitAndLoss report
  # @option opts [String] :tracking_option_id2 The tracking option 2 for the ProfitAndLoss report
  # @option opts [Boolean] :standard_layout Return the standard layout for the ProfitAndLoss report
  # @option opts [Boolean] :payments_only Return cash only basis for the ProfitAndLoss report
  # @return [ReportWithRows]
  describe 'get_report_profit_and_loss test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_ten_ninety_nine
  # Allows you to retrieve report for TenNinetyNine
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :report_year The year of the 1099 report
  # @return [Reports]
  describe 'get_report_ten_ninety_nine test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_report_trial_balance
  # Allows you to retrieve report for TrialBalance
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [Date] :date The date for the Trial Balance report e.g. 2018-03-31
  # @option opts [Boolean] :payments_only Return cash only basis for the Trial Balance report
  # @return [ReportWithRows]
  describe 'get_report_trial_balance test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tax_rates
  # Allows you to retrieve Tax Rates
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [String] :tax_type Filter by tax type
  # @return [TaxRates]
  describe 'get_tax_rates test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tracking_categories
  # Allows you to retrieve tracking categories and options
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @option opts [Boolean] :include_archived e.g. includeArchived&#x3D;true - Categories and options with a status of ARCHIVED will be included in the response
  # @return [TrackingCategories]
  describe 'get_tracking_categories test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_tracking_category
  # Allows you to retrieve tracking categories and options for specified category
  # @param xero_tenant_id Xero identifier for Tenant
  # @param tracking_category_id Unique identifier for a TrackingCategory
  # @param [Hash] opts the optional parameters
  # @return [TrackingCategories]
  describe 'get_tracking_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_user
  # Allows you to retrieve a specified user
  # @param xero_tenant_id Xero identifier for Tenant
  # @param user_id Unique identifier for a User
  # @param [Hash] opts the optional parameters
  # @return [Users]
  describe 'get_user test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for get_users
  # Allows you to retrieve users
  # @param xero_tenant_id Xero identifier for Tenant
  # @param [Hash] opts the optional parameters
  # @option opts [DateTime] :if_modified_since Only records created or modified since this timestamp will be returned
  # @option opts [String] :where Filter by an any element
  # @option opts [String] :order Order by an any element
  # @return [Users]
  describe 'get_users test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account
  # Allows you to update a chart of accounts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param account_id Unique identifier for retrieving single object
  # @param accounts Request of type Accounts array with one Account
  # @param [Hash] opts the optional parameters
  # @return [Accounts]
  describe 'update_account test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_account_attachment_by_file_name
  # Allows you to update Attachment on Account by Filename
  # @param xero_tenant_id Xero identifier for Tenant
  # @param account_id Unique identifier for Account object
  # @param file_name Name of the attachment
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'update_account_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_bank_transaction
  # Allows you to update a single spend or receive money transaction
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transaction_id Xero generated unique identifier for a bank transaction
  # @param bank_transactions
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [BankTransactions]
  describe 'update_bank_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_bank_transaction_attachment_by_file_name
  # Allows you to update an Attachment on BankTransaction by Filename
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transaction_id Xero generated unique identifier for a bank transaction
  # @param file_name The name of the file being attached
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'update_bank_transaction_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_bank_transfer_attachment_by_file_name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transfer_id Xero generated unique identifier for a bank transfer
  # @param file_name The name of the file being attached to a Bank Transfer
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'update_bank_transfer_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_contact
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param contacts an array of Contacts containing single Contact object with properties to update
  # @param [Hash] opts the optional parameters
  # @return [Contacts]
  describe 'update_contact test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_contact_attachment_by_file_name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_id Unique identifier for a Contact
  # @param file_name Name for the file you are attaching
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'update_contact_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_contact_group
  # Allows you to update a Contact Group
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contact_group_id Unique identifier for a Contact Group
  # @param contact_groups an array of Contact groups with Name of specific group to update
  # @param [Hash] opts the optional parameters
  # @return [ContactGroups]
  describe 'update_contact_group test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_credit_note
  # Allows you to update a specific credit note
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param credit_notes an array of Credit Notes containing credit note details to update
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [CreditNotes]
  describe 'update_credit_note test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_credit_note_attachment_by_file_name
  # Allows you to update Attachments on CreditNote by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_note_id Unique identifier for a Credit Note
  # @param file_name Name of the file you are attaching to Credit Note
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'update_credit_note_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_expense_claim
  # Allows you to update specified expense claims
  # @param xero_tenant_id Xero identifier for Tenant
  # @param expense_claim_id Unique identifier for a ExpenseClaim
  # @param expense_claims
  # @param [Hash] opts the optional parameters
  # @return [ExpenseClaims]
  describe 'update_expense_claim test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_invoice
  # Allows you to update a specified sales invoices or purchase bills
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param invoices
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Invoices]
  describe 'update_invoice test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_invoice_attachment_by_file_name
  # Allows you to update Attachment on invoices or purchase bills by it&#39;s filename
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoice_id Unique identifier for an Invoice
  # @param file_name Name of the file you are attaching
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'update_invoice_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_item
  # Allows you to update a specified item
  # @param xero_tenant_id Xero identifier for Tenant
  # @param item_id Unique identifier for an Item
  # @param items
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Items]
  describe 'update_item test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_linked_transaction
  # Allows you to update a specified linked transactions (billable expenses)
  # @param xero_tenant_id Xero identifier for Tenant
  # @param linked_transaction_id Unique identifier for a LinkedTransaction
  # @param linked_transactions
  # @param [Hash] opts the optional parameters
  # @return [LinkedTransactions]
  describe 'update_linked_transaction test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_manual_journal
  # Allows you to update a specified manual journal
  # @param xero_tenant_id Xero identifier for Tenant
  # @param manual_journal_id Unique identifier for a ManualJournal
  # @param manual_journals
  # @param [Hash] opts the optional parameters
  # @return [ManualJournals]
  describe 'update_manual_journal test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_manual_journal_attachment_by_file_name
  # Allows you to update a specified Attachment on ManualJournal by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param manual_journal_id Unique identifier for a ManualJournal
  # @param file_name The name of the file being attached to a ManualJournal
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'update_manual_journal_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_or_create_bank_transactions
  # Allows you to update or create one or more spend or receive money transaction
  # @param xero_tenant_id Xero identifier for Tenant
  # @param bank_transactions
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [BankTransactions]
  describe 'update_or_create_bank_transactions test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_or_create_contacts
  # Allows you to update OR create one or more contacts in a Xero organisation
  # @param xero_tenant_id Xero identifier for Tenant
  # @param contacts
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [Contacts]
  describe 'update_or_create_contacts test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_or_create_credit_notes
  # Allows you to update OR create one or more credit notes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param credit_notes an array of Credit Notes with a single CreditNote object.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [CreditNotes]
  describe 'update_or_create_credit_notes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_or_create_employees
  # Allows you to create a single new employees used in Xero payrun
  # @param xero_tenant_id Xero identifier for Tenant
  # @param employees Employees with array of Employee object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [Employees]
  describe 'update_or_create_employees test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_or_create_invoices
  # Allows you to update OR create one or more sales invoices or purchase bills
  # @param xero_tenant_id Xero identifier for Tenant
  # @param invoices
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Invoices]
  describe 'update_or_create_invoices test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_or_create_items
  # Allows you to update or create one or more items
  # @param xero_tenant_id Xero identifier for Tenant
  # @param items
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Items]
  describe 'update_or_create_items test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_or_create_manual_journals
  # Allows you to create a single manual journal
  # @param xero_tenant_id Xero identifier for Tenant
  # @param manual_journals ManualJournals array with ManualJournal object in body of request
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [ManualJournals]
  describe 'update_or_create_manual_journals test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_or_create_purchase_orders
  # Allows you to update or create one or more purchase orders
  # @param xero_tenant_id Xero identifier for Tenant
  # @param purchase_orders
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [PurchaseOrders]
  describe 'update_or_create_purchase_orders test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_or_create_quotes
  # Allows you to update OR create one or more quotes
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quotes
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :summarize_errors If false return 200 OK and mix of successfully created obejcts and any with validation errors
  # @return [Quotes]
  describe 'update_or_create_quotes test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_purchase_order
  # Allows you to update a specified purchase order
  # @param xero_tenant_id Xero identifier for Tenant
  # @param purchase_order_id Unique identifier for a PurchaseOrder
  # @param purchase_orders
  # @param [Hash] opts the optional parameters
  # @return [PurchaseOrders]
  describe 'update_purchase_order test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_quote
  # Allows you to update a specified quote
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quote_id Unique identifier for an Quote
  # @param quotes
  # @param [Hash] opts the optional parameters
  # @return [Quotes]
  describe 'update_quote test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_quote_attachment_by_file_name
  # Allows you to update Attachment on Quote by Filename
  # @param xero_tenant_id Xero identifier for Tenant
  # @param quote_id Unique identifier for Quote object
  # @param file_name Name of the attachment
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'update_quote_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_receipt
  # Allows you to retrieve a specified draft expense claim receipts
  # @param xero_tenant_id Xero identifier for Tenant
  # @param receipt_id Unique identifier for a Receipt
  # @param receipts
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :unitdp e.g. unitdp&#x3D;4 â€“ (Unit Decimal Places) You can opt in to use four decimal places for unit amounts
  # @return [Receipts]
  describe 'update_receipt test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_receipt_attachment_by_file_name
  # Allows you to update Attachment on expense claim receipts by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param receipt_id Unique identifier for a Receipt
  # @param file_name The name of the file being attached to the Receipt
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'update_receipt_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_repeating_invoice_attachment_by_file_name
  # Allows you to update specified attachment on repeating invoices by file name
  # @param xero_tenant_id Xero identifier for Tenant
  # @param repeating_invoice_id Unique identifier for a Repeating Invoice
  # @param file_name The name of the file being attached to a Repeating Invoice
  # @param body Byte array of file in body of request
  # @param [Hash] opts the optional parameters
  # @return [Attachments]
  describe 'update_repeating_invoice_attachment_by_file_name test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_tax_rate
  # Allows you to update Tax Rates
  # @param xero_tenant_id Xero identifier for Tenant
  # @param tax_rates
  # @param [Hash] opts the optional parameters
  # @return [TaxRates]
  describe 'update_tax_rate test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_tracking_category
  # Allows you to update tracking categories
  # @param xero_tenant_id Xero identifier for Tenant
  # @param tracking_category_id Unique identifier for a TrackingCategory
  # @param tracking_category
  # @param [Hash] opts the optional parameters
  # @return [TrackingCategories]
  describe 'update_tracking_category test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

  # unit tests for update_tracking_options
  # Allows you to update options for a specified tracking category
  # @param xero_tenant_id Xero identifier for Tenant
  # @param tracking_category_id Unique identifier for a TrackingCategory
  # @param tracking_option_id Unique identifier for a Tracking Option
  # @param tracking_option
  # @param [Hash] opts the optional parameters
  # @return [TrackingOptions]
  describe 'update_tracking_options test' do
    it 'should work' do
      # assertion here. ref: https://www.relishapp.com/rspec/rspec-expectations/docs/built-in-matchers
    end
  end

end
